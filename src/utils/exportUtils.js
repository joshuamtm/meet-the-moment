import { saveAs } from 'file-saver';

export const exportToMarkdown = (items, parkingLotItems = []) => {
  const now = new Date();
  const timestamp = now.toISOString();
  const meetingId = `MTG-${now.getFullYear()}${(now.getMonth() + 1).toString().padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}-${now.getHours().toString().padStart(2, '0')}${now.getMinutes().toString().padStart(2, '0')}`;
  
  let markdown = `# Meeting Agenda\n`;
  markdown += `**Meeting ID:** ${meetingId}\n`;
  markdown += `**Timestamp:** ${timestamp}\n\n`;
  markdown += `---\n\n`;
  
  markdown += `## Agenda Items\n\n`;
  
  const sortedItems = [...items].sort((a, b) => a.order - b.order);
  
  sortedItems.forEach((item, index) => {
    const statusIcon = {
      'open': '⭕',
      'discussed': '💬',
      'complete': '✅',
      'deferred': '⏸️'
    }[item.status] || '⭕';
    
    markdown += `### ${index + 1}. ${item.title} ${statusIcon}\n`;
    markdown += `**Priority:** ${item.priority.label}\n`;
    markdown += `**Status:** ${item.status.charAt(0).toUpperCase() + item.status.slice(1)}\n\n`;
    
    if (item.description) {
      markdown += `**Description:**\n${item.description}\n\n`;
    }
    
    if (item.rationale) {
      markdown += `**Rationale:**\n${item.rationale}\n\n`;
    }
    
    if (item.targetOutcome) {
      markdown += `**Target Outcome:**\n${item.targetOutcome}\n\n`;
    }
    
    markdown += `---\n\n`;
  });
  
  if (parkingLotItems.length > 0) {
    markdown += `## Parking Lot (Deferred Items)\n\n`;
    parkingLotItems.forEach((item, index) => {
      markdown += `${index + 1}. **${item.title}**\n`;
      if (item.description) {
        markdown += `   ${item.description}\n`;
      }
      markdown += `\n`;
    });
  }
  
  markdown += `\n---\n*Generated by Meet the Moment Dashboard*\n`;
  
  return { markdown, meetingId };
};

export const copyToClipboard = async (text) => {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (err) {
    console.error('Failed to copy:', err);
    return false;
  }
};

export const downloadMarkdown = (markdown, meetingId) => {
  const blob = new Blob([markdown], { type: 'text/markdown;charset=utf-8' });
  saveAs(blob, `${meetingId}-agenda.md`);
};